!function(){"use strict";const e={formSelector:".form",inputSelector:".form__input",submitButtonSelector:".form__submit-button",inactiveButtonClass:"form__submit-button_disabled",inputErrorClass:"form__input_type_error",errorClass:"form__error_visible"},t=document.querySelector(".profile__edit-button"),n=document.querySelector(".form_type_edit"),s=n.querySelector(".form__input_type_name"),i=n.querySelector(".form__input_type_info"),o=document.querySelector(".profile__add-button"),r=document.querySelector(".form_type_add-card");function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}class l{constructor(e,t,n){a(this,"_handleLikeButton",(e=>{e.target.classList.toggle("card__like_active")})),a(this,"_handleDeleteCardButton",(()=>{this._cardElement.remove(),this._cardElement=null})),this._image=e.link,this._title=e.name,this._alt=e.alt,this._cardSelector=t,this._handleCardClick=n}_getTemplate(){return document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0)}_setEventListeners(){this._cardElement.querySelector(".card__delete-button").addEventListener("click",this._handleDeleteCardButton),this._cardElement.querySelector(".card__like").addEventListener("click",this._handleLikeButton),this._cardElement.querySelector(".card__picture").addEventListener("click",this._handleCardClick)}generateCard(){this._cardElement=this._getTemplate();const e=this._cardElement.querySelector(".card__picture"),t=this._cardElement.querySelector(".card__description");return e.src=this._image,e.alt=this._alt,t.textContent=this._title,this._setEventListeners(),this._cardElement}}class c{constructor(e,t){this._config=e,this._formElement=t,this._buttonElement=this._formElement.querySelector(this._config.submitButtonSelector),this._inputList=Array.from(this._formElement.querySelectorAll(this._config.inputSelector))}_showInputError(e){const t=this._formElement.querySelector(".".concat(e.id,"-error"));e.classList.add(this._config.inputErrorClass),t.textContent=e.validationMessage,t.classList.add(this._config.errorClass)}_hideInputError(e){const t=this._formElement.querySelector(".".concat(e.id,"-error"));e.classList.remove(this._config.inputErrorClass),t.textContent="",t.classList.remove(this._config.errorClass)}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e)}_hasInvalidInput(){return this._inputList.some((e=>!e.validity.valid))}_setButtonToDisabledState(){this._buttonElement.classList.add(this._config.inactiveButtonClass),this._buttonElement.disabled=!0}_setButtonToEnabledState(){this._buttonElement.classList.remove(this._config.inactiveButtonClass),this._buttonElement.disabled=!1}_changeButtonState(e){this._hasInvalidInput(e)?this._setButtonToDisabledState(this._buttonElement):this._setButtonToEnabledState(this._buttonElement)}_setEventListeners(){const e=Array.from(this._formElement.querySelectorAll(this._config.inputSelector));this._changeButtonState(e,this._buttonElement),e.forEach((t=>{t.addEventListener("input",(()=>{this._checkInputValidity(t),this._changeButtonState(e,this._buttonElement)}))}))}enableValidation(){this._formElement.addEventListener("submit",(e=>e.preventDefault)),this._setEventListeners()}resetFormValidation(){this._inputList.forEach((e=>{this._hideInputError(e)})),this._setButtonToDisabledState()}}function u(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}class d{constructor(e){u(this,"_handleEscClose",(e=>{"Escape"===e.key&&this.close()})),u(this,"_handleMouseClick",(e=>{(e.target.classList.contains("popup")||e.target.classList.contains("popup__close-button"))&&this.close()})),this._popupElement=document.querySelector(e)}open(){this._popupElement.classList.add("popup_opened"),this._setEventListeners()}close(){this._popupElement.classList.remove("popup_opened"),this._removeEventListeners()}_setEventListeners(){this._popupElement.addEventListener("mousedown",this._handleMouseClick),document.addEventListener("keydown",this._handleEscClose)}_removeEventListeners(){this._popupElement.removeEventListener("mousedown",this._handleMouseClick),document.removeEventListener("keydown",this._handleEscClose)}}class _ extends d{constructor(e,t,n){var s,i;super(e),i=e=>{e.preventDefault();const t=this._getInputValues();this._handleSubmit(t),this.close()},(s="_onSubmit")in this?Object.defineProperty(this,s,{value:i,enumerable:!0,configurable:!0,writable:!0}):this[s]=i,this._handleSubmit=t,this._formValidator=n,this._formElement=this._popupElement.querySelector(".form")}_getInputValues(){const e=[...this._popupElement.querySelectorAll(".form__input")],t={};return e.forEach((e=>{t[e.name]=e.value})),t}open(){super.open(),this._formValidator.resetFormValidation()}close(){super.close(),this._formElement.reset()}_setEventListeners(){super._setEventListeners(),this._formElement.addEventListener("submit",this._onSubmit)}_removeEventListeners(){super._removeEventListeners(),this._formElement.removeEventListener("submit",this._onSubmit)}}const h=new c(e,n),m=new c(e,r);h.enableValidation(),m.enableValidation();const p=e=>{const t=new l(e,"#card",(()=>(e=>{f.open(e.link,e.name)})(e)));return t.generateCard()},E=new class{constructor(e,t){let{items:n,renderer:s}=e;this._items=n,this._renderer=s,this._section=document.querySelector(t)}addItem(e){this._section.prepend(e)}renderCards(){this._items.forEach(this._renderer)}}({items:[{name:"Yosemite Valley",link:"https://code.s3.yandex.net/web-code/yosemite.jpg",alt:"A river with forest on the banks, mountains in the background"},{name:"Lake Louise",link:"https://code.s3.yandex.net/web-code/lake-louise.jpg",alt:"A lake surrounded by mountains and forest"},{name:"Bald Mountains",link:"https://code.s3.yandex.net/web-code/bald-mountains.jpg",alt:"Sunrise above dark hills"},{name:"Latemar",link:"https://code.s3.yandex.net/web-code/latemar.jpg",alt:"Starry night, mountains with piece of snow"},{name:"Vanoise National Park",link:"https://code.s3.yandex.net/web-code/vanoise.jpg",alt:"Coast of lake, mountains on the background"},{name:"Lago di Braies",link:"https://code.s3.yandex.net/web-code/lago.jpg",alt:"Small dock with little boats on the mountain lake"}],renderer:e=>{E.addItem(p(e))}},".gallery__list");E.renderCards();const b=new class{constructor(e,t){this._nameField=document.querySelector(e),this._jobField=document.querySelector(t)}getUserInfo(){return{name:this._nameField.textContent,job:this._jobField.textContent}}setUserInfo(e){this._nameField.textContent=e.name,this._jobField.textContent=e.info}}(".profile__name",".profile__about"),f=new class extends d{constructor(e){super(e)}open(e,t){super.open();const n=document.querySelector(".popup-picture-box__image"),s=document.querySelector(".popup-picture-box__caption");n.src=e,n.alt="Here was a beautiful picture of ".concat(t),s.textContent=t}}(".popup_type_picture"),v=new _(".popup_type_edit",(e=>{b.setUserInfo(e)}),h),y=new _(".popup_type_add-card",(e=>{e.alt="Here was a beautiful picture of ".concat(e.name),E.addItem(p(e))}),m);t.addEventListener("click",(()=>{(()=>{const e=b.getUserInfo();s.value=e.name,i.value=e.job})(),v.open()})),o.addEventListener("click",(()=>y.open()))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,