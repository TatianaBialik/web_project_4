!function(){"use strict";const e={formSelector:".form",inputSelector:".form__input",submitButtonSelector:".form__submit-button",inactiveButtonClass:"form__submit-button_disabled",inputErrorClass:"form__input_type_error",errorClass:"form__error_visible"},t=document.querySelector(".profile__edit-button"),s=document.querySelector(".form_type_edit"),r=s.querySelector(".form__input_type_name"),n=s.querySelector(".form__input_type_info"),o=document.querySelector(".profile__add-button"),i=document.querySelector(".form_type_add-card"),a=document.querySelector(".form_type_edit-avatar"),l=document.querySelector(".profile__avatar");class c{constructor(e,t,s,r,n,o,i){this._image=e.link,this._title=e.name,this._alt=e.alt,this._likes=e.likes,this._id=e._id,this._userId=t,this._ownerId=s,this._cardSelector=r,this._handleCardClick=n,this._handleLikeButton=o,this._handleDeleteCardButton=i}getId(){return this._id}_getTemplate(){return document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0)}isLiked(){return this._likes.find((e=>e._id===this._userId))}setLikes(e){this._likes=e;const t=this._likes.length;this._cardElement.querySelector(".card__like-counter").textContent=t,this.isLiked()?this._cardElement.querySelector(".card__like").classList.add("card__like_active"):this._cardElement.querySelector(".card__like").classList.remove("card__like_active")}deleteCard(){this._cardElement.remove(),this._cardElement=null}_setEventListeners(){this._cardElement.querySelector(".card__delete-button").addEventListener("click",(()=>this._handleDeleteCardButton())),this._cardElement.querySelector(".card__like").addEventListener("click",this._handleLikeButton),this._cardElement.querySelector(".card__picture").addEventListener("click",this._handleCardClick)}generateCard(){this._cardElement=this._getTemplate();const e=this._cardElement.querySelector(".card__picture"),t=this._cardElement.querySelector(".card__description");this.setLikes(this._likes);const s=this._cardElement.querySelector(".card__delete-button");return this._userId!==this._ownerId&&s.classList.add("card__delete-button_disabled"),e.src=this._image,e.alt=this._alt,t.textContent=this._title,this._setEventListeners(),this._cardElement}}class d{constructor(e,t){this._config=e,this._formElement=t,this._buttonElement=this._formElement.querySelector(this._config.submitButtonSelector),this._inputList=Array.from(this._formElement.querySelectorAll(this._config.inputSelector))}_showInputError(e){const t=this._formElement.querySelector(".".concat(e.id,"-error"));e.classList.add(this._config.inputErrorClass),t.textContent=e.validationMessage,t.classList.add(this._config.errorClass)}_hideInputError(e){const t=this._formElement.querySelector(".".concat(e.id,"-error"));e.classList.remove(this._config.inputErrorClass),t.textContent="",t.classList.remove(this._config.errorClass)}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e)}_hasInvalidInput(){return this._inputList.some((e=>!e.validity.valid))}_setButtonToDisabledState(){this._buttonElement.classList.add(this._config.inactiveButtonClass),this._buttonElement.disabled=!0}_setButtonToEnabledState(){this._buttonElement.classList.remove(this._config.inactiveButtonClass),this._buttonElement.disabled=!1}_changeButtonState(e){this._hasInvalidInput(e)?this._setButtonToDisabledState(this._buttonElement):this._setButtonToEnabledState(this._buttonElement)}_setEventListeners(){const e=Array.from(this._formElement.querySelectorAll(this._config.inputSelector));this._changeButtonState(e,this._buttonElement),e.forEach((t=>{t.addEventListener("input",(()=>{this._checkInputValidity(t),this._changeButtonState(e,this._buttonElement)}))}))}enableValidation(){this._formElement.addEventListener("submit",(e=>e.preventDefault)),this._setEventListeners()}resetFormValidation(){this._inputList.forEach((e=>{this._hideInputError(e)})),this._setButtonToDisabledState()}}function _(e,t,s){return t in e?Object.defineProperty(e,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[t]=s,e}class u{constructor(e){_(this,"_handleEscClose",(e=>{"Escape"===e.key&&this.close()})),_(this,"_handleMouseClick",(e=>{(e.target.classList.contains("popup")||e.target.classList.contains("popup__close-button"))&&this.close()})),this._popupElement=document.querySelector(e)}open(){this._popupElement.classList.add("popup_opened"),this._setEventListeners()}close(){this._popupElement.classList.remove("popup_opened"),this._removeEventListeners()}_setEventListeners(){this._popupElement.addEventListener("mousedown",this._handleMouseClick),document.addEventListener("keydown",this._handleEscClose)}_removeEventListeners(){this._popupElement.removeEventListener("mousedown",this._handleMouseClick),document.removeEventListener("keydown",this._handleEscClose)}}class h extends u{constructor(e,t,s){super(e),this._handleSubmit=t,this._formValidator=s,this._formElement=this._popupElement.querySelector(".form")}getInputValues(){const e=Array.from(this._popupElement.querySelectorAll(".form__input")),t={};return e.forEach((e=>{t[e.name]=e.value})),t}open(){super.open(),this._formValidator.resetFormValidation()}close(){super.close(),this._formElement.reset()}setEventListeners(){super.setEventListeners(),this._popupElement.addEventListener("submit",(e=>{e.preventDefault(),this._submitFunction()}))}}const m=new class{constructor(e){this._baseUrl=e.baseUrl,this._headers=e.headers}getUserInfo(){return fetch(this._baseUrl+"/user/me",{headers:this._headers}).then((e=>e.ok?e.json():Promise.reject("Error: ".concat(e.status)))).catch((e=>console.log(e)))}getInitialCards(){return fetch(this._baseUrl+"/cards",{headers:this._headers}).then((e=>e.ok?e.json():Promise.reject("Error: ".concat(e.status)))).catch((e=>console.log(e)))}addCard(e,t){return fetch(this._baseUrl+"/cards",{method:"POST",headers:this._headers,body:JSON.stringify({name:e,link:t})}).then((e=>e.ok?e.json():Promise.reject("Error: ".concat(e.status)))).catch((e=>console.log(e)))}addLike(e){return fetch(this._baseUrl+"/cards/likes/"+e,{method:"PUT",headers:this._headers}).then((e=>e.ok?e.json():Promise.reject("Error: ".concat(e.status)))).catch((e=>console.log(e)))}removeLike(e){return fetch(this._baseUrl+"/cards/likes/"+e,{method:"DELETE",headers:this._headers}).then((e=>e.ok?e.json():Promise.reject("Error: ".concat(e.status)))).catch((e=>console.log(e)))}deleteCard(e){return fetch(this._baseUrl+"/cards/"+e,{method:"DELETE",headers:this._headers})}editProfilePhoto(e){return fetch(this._baseUrl+"/users/me/avatar",{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e})}).then((e=>e.ok?e.json():Promise.reject("Error: ".concat(e.status)))).catch((e=>console.log(e)))}editProfileInfo(e,t){return fetch(this._baseUrl+"/user/me",{method:"PATCH",headers:this._headers,body:JSON.stringify({name:e,about:t})}).then((e=>e.ok?e.json():Promise.reject("Error: ".concat(e.status)))).catch((e=>console.log(e)))}}({baseUrl:"https://around.nomoreparties.co/v1/cohort-3-en",headers:{authorization:"c0d07090-8c80-49c2-aa7a-cd5677a34984","Content-Type":"application/json"}}),p=new d(e,s),E=new d(e,i),f=new d(e,a);let b;p.enableValidation(),E.enableValidation(),f.enableValidation();const v=e=>{const t=new c(e,L,e.owner._id,"#card",(()=>(e=>{k.open(e.link,e.name)})(e)),(()=>{t.isLiked()?m.removeLike(t.getId()).then((e=>{t.setLikes(e.likes)})):m.addLike(t.getId()).then((e=>{t.setLikes(e.likes)}))}),(()=>{w.open(),b=t}));return t.generateCard()},y=new class{constructor(e,t){let{renderer:s}=e;this._renderer=s,this._section=document.querySelector(t)}addItem(e){this._section.append(e)}renderCards(e){e.forEach((e=>{this._renderer(e)}))}}({renderer:e=>{y.addItem(v(e))}},".gallery__list");let L;Promise.all([m.getUserInfo(),m.getInitialCards()]).then((e=>{let[t,s]=e;L=t._id,S.setUserInfo(t),l.src=t.avatar,y.renderCards(s)}));const S=new class{constructor(e,t){this._nameField=document.querySelector(e),this._jobField=document.querySelector(t)}getUserInfo(){return{name:this._nameField.textContent,job:this._jobField.textContent}}setUserInfo(e){this._nameField.textContent=e.name,this._jobField.textContent=e.about}}(".profile__name",".profile__about"),k=new class extends u{constructor(e){super(e)}open(e,t){super.open();const s=document.querySelector(".popup-picture-box__image"),r=document.querySelector(".popup-picture-box__caption");s.src=e,s.alt="Here was a beautiful picture of ".concat(t),r.textContent=t}}(".popup_type_picture");function g(e){const t=e.textContent;return e.textContent="Saving...",t}const C=new h(".popup_type_edit",(()=>{const e=s.querySelector(".form__submit-button"),t=g(e);m.editProfileInfo(C.getInputValues()).then((e=>{S.setUserInfo(e)})).finally((()=>{C.close(),e.textContent=t}))}),p);C.setEventListeners();const I=new h(".popup_type_add-card",(()=>{const e=I.getInputValues(),t=i.querySelector(".form__submit-button"),s=g(t);m.addCard(e.name,e.link).then((e=>{y.addItem(v(e))})).finally((()=>{I.close(),t.textContent=s})),e.alt="Here was a beautiful picture of ".concat(e.name)}),E),q=new h(".popup_type_edit-avatar",(()=>{const e=a.querySelector(".form__submit-button"),t=g(e);m.editProfilePhoto(q.getInputValues().avatar).then((e=>{l.src=e.avatar})).finally((()=>{q.close(),e.textContent=t}))}),f);q.setEventListeners();const w=new class extends u{constructor(e,t){super(e),this._submitFunction=t}setEventListeners(){super.setEventListeners(),this._popupElement.addEventListener("submit",(e=>{e.preventDefault(),this._submitFunction()}))}}(".popup_type_delete-card",(()=>{m.deleteCard(b.getId()).finally(w.close()),b.deleteCard()}));w.setEventListeners(),t.addEventListener("click",(()=>{(()=>{const e=S.getUserInfo();r.value=e.name,n.value=e.job})(),C.open()})),o.addEventListener("click",(()=>I.open())),l.addEventListener("click",(()=>q.open()))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,